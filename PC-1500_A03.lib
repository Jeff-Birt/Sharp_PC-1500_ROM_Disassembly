 ; PC-1500 library file
RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
SHADOW_RAM_SIZE   = $0600 ; 
DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
DISP_BUFF_SIZE    = $0150 ; 
STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
STRING_VARS_SIZE  = $01AF ; 
CPU_STACK         = $7800 ; CPU stack (7800-784F)
CPU_STACK_SIZE    = $50   ; 
KATAFLAGS         = $785D ; Katakana displayed flags
KATACHAR          = $785E ; Address of Katakana character codes (H)
ST_ROM_MOD        = $7860 ; 
ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
RAM_ST_H          = $7863 ; Start of RAM pointer (H)
RAM_END_H         = $7864 ; End of RAM pointer (H)
BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
BEEP_PTR          = $786B ; BEEP and RMT flags
RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
RCLTEMPBUFF_SIZE  = $05   ; 
WAIT_CFG          = $7871 ; WAIT setting
WAIT_CTR_H        = $7872 ; WAIT time counter (H)
WAIT_CTR_L        = $7873 ; WAIT time counter (L)
CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
BEEP_FREQ         = $7878 ; BEEP frequency
CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
BLNKD_CHAR_CODE   = $787D ; Code of character blinked
CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
DISPARAM          = $7880 ; Display Parameter: determines display at READY
STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
CURVARADD_H       = $7883 ; Current variable address (H)
CURVARADD_L       = $7884 ; Current variable address (L)
CURVARTYPE        = $7885 ; Current variable type
LASTVARADD_H      = $7886 ; Last variable address (H)
LASTVARADD_L      = $7887 ; Last variable address (L)
LASTVARTYPE       = $7888 ; Last variable type
BREAKPARAM        = $788A ; BREAK flag parameter
INBUFPTR_L        = $788B ; Input Buffer pointer (L)
NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
TRACE             = $788E ; TRACE Parameter
FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
USINGM            = $7896 ; USING M integer part
USING_CHR         = $7897 ; USING & character string
USINGMD           = $7898 ; USING m decimal part
VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
ERL               = $789B ; ERL, Error code
CURR_LINE_H       = $789C ; Current line number (H)
CURR_LINE_L       = $789D ; Current line number (L)
CURR_TOP_H        = $789E ; Beginning address of current program (H)
CURR_TOP_L        = $789F ; Beginning address of current program (L)
PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
PREV_LINE_H       = $78A2 ; Previous line number (H)
PREV_LINE_L       = $78A3 ; Previous line number (L)
PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
SRCH_LINE_H       = $78A8 ; Line number found after search (H)
SRCH_LINE_L       = $78A9 ; Line number found after search (L)
SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
BRK_ADD_H         = $78AC ; Break address (H)
BRK_ADD_L         = $78AD ; Break address (L)
BRK_LINE_H        = $78AE ; Break line number (H)
BRK_LINE_L        = $78AF ; Break line number (L)
BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
ERR_ADD_H         = $78B2 ; Error address (H)
ERR_ADD_L         = $78B3 ; Error address (L)
ERR_LINE_H        = $78B4 ; Error line number (H)
ERR_LINE_L        = $78B5 ; Error line number (L)
ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
DATA_PTR_H        = $78BE ; Pointer for data statement (H)
DATA_PTR_L        = $78BF ; Pointer for data statement (H)
FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
FIXED_VARS_SIZE   = $0110 ; 
PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
ARX               = $7A00 ; Floating-Point accumulator
ARX_SIZE          = $08   ; 
ARZ               = $7A08 ; Scratch register (7A00-7A07)
ARZ_SIZE          = $08   ; 
ARY               = $7A10 ; Second operand (7A10-7A17)
ARY_SIZE          = $08   ; 
ARU               = $7A18 ; Scratch register (7A18-7A1F)
ARU_SIZE          = $08   ; 
ARV               = $7A20 ; Scratch register (7A2-7A27)
ARV_SIZE          = $08   ; 
ARW               = $7A28 ; Scratch register (7A28-7A2F)
ARW_SIZE          = $08   ; 
ARS               = $7A30 ; Temporary storage register (7A30-7A37)
ARS_SIZE          = $08   ; 
B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
B_STACK_SIZE      = $C8   ; 
RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
RND_VAL_SIZE      =       ; S
KEY_REPEAT        = $7B09 ; Key repeat speed
APOW_CTR_H        = $7B0A ; Auto power down counter (H)
APOW_CTR_M        = $7B0B ; Auto power down counter (M)
APOW_CTR_L        = $7B0C ; Auto power down counter (L)
CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
CURS_CTRL         = $7B0E ; Cursor Control Parameter
KEY_LAST          = $7B0F ; Last pressed key code
STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
STR_BUF_SIZE      = $50   ; 
OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
OUT_BUF_SIZE      = $50   ; 
IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
IN_BUF_SIZE       = $80   ; 
ST_MAIN_ROM       = $C000 ; Start of PC-1500 ROM, 55
SA_XREG_2RAM      = $C001 ; Save X-Reg to 78xx. D1 defines low byte xx.
SAVEVARPTR_ARX    = $C00E ; Save variable pointer. Address from U-Reg, length from AR-X (7A07).
SAVEVARPTR_A      = $C011 ; Save variable pointer. Address from U-Reg, length from A.
TRACE_VEC         = $C01D ; Not used (C01C-C01F)
ST_BAS_TBL        = $C020 ; Start of Basic table
TOKEN_TBL         = $C054 ; B5: AREAD F1 80:C684
SM_NEW0           = $C34F ;  'NEW0?' (C350-C354) (Start of system messages)
SM_NEW0_SIZE      = $05   ; 
SM_CHECK          = $C355 ;  ':CHECK' (C355-C35B)
SM_BREAK          = $C35C ;  'BREAK' (C35C-C361)
SM_IN             = $C362 ;  'IN' (C362-C364)
SM_IN_SIZE        = $05   ; 
SM_ERROR          = $C365 ;  'ERROR' (C365-C36A)
SM_ERROR_SIZE     = $05   ; 
DEFKEY_TBL        = $C36B ; Occupied DEF key table (C36B-C38A)
DEFKEY_TBL_SIZE   = $05   ; 
EDCTRL_TBL        = $C38B ; Address table for editor control characters (C38B-C3A9)
EDCTRL_TBL_SIZE   = $05   ; 
FVAL_TBLE         = $C3A8 ; Operator table for formula eval of subs (C3A8-C3FF)  (DE) (D6DF)
FVAL_TBLE_SIZE    = $05   ; 
BASIC_INT         = $C400 ; Basic interpreter, Y-Ref points to next char/token
BCMD_LET          = $C458 ; Basic command LET
TRCROUTINE        = $C4AF ; Trace Routine
BCMD_STOP         = $C4B6 ; Basic command STOP
BCMD_END          = $C50D ; Basic Command END
BCMD_GOTO         = $C515 ; Basic Command GOTO
DEFKEY_EVAL       = $C529 ; Evaluate def keys
BCMD_IF           = $C5B4 ; Basic Command IF
BCMD_ON           = $C5E0 ; Basic Command ON
BCMD_GOSUB        = $C64E ; Basic Command GOSUB
BCMD_REM          = $C676 ; Basic Command REM
BCMD_USING        = $C67C ; Basic Command USING
BCMD_DATA         = $C684 ; Basic Command DATA / ARUN / AREAD
BCMD_TRON         = $C68C ; Basic Command TRON
BCMD_TROFF        = $C693 ; Basic Command TROFF
BCMD_DEGREE       = $C697 ; Basic Command DEGREE
BCMD_RADIAN       = $C6A4 ; Basic Command RADIAN
BCMD_GRAD         = $C6A8 ; Basic Command GRAD
BCMD_RETURN       = $C6AC ; Basic Command RETURN
BCMD_NEXT         = $C704 ; Basic Command NEXT
BCMD_FOR          = $C711 ; Basic Command FOR
BCMD_POKE         = $C777 ; Basic Command POKE
BCMD_POKE#        = $C778 ; Basic Command POKE#
BCMD_RESTORE      = $C7A2 ; Basic Command RESTORE
BCMD_READ         = $C7BB ; Basic Command READ
BCMD_NEW          = $C8A0 ; Basic Command NEW
BCMD_CLEAR        = $C8F5 ; Basic Command CLEAR
BCMD_CALL         = $CB63 ; Basic Command CALL
BCMD_RUN          = $C884 ; Basic Command RUN
BCMD_CONT         = $C8C7 ; Basic Command CONT
BCMD_INPUT        = $C8FA ; Basic Command INPUT
BCMD_LOCK         = $C968 ; Basic Command LOCK
BCMD_UNLOCK       = $C96A ; Basic Command UNLOCK
BCMD_LIST         = $C96E ; Basic Command LIST
BCMD_DIM          = $C988 ; Basic Command DIM
COLD_START        = $C9E4 ; Editor Cold Start
BTN_SHCL          = $CA55 ; SHIFT CL (Clear All)
WARM_START        = $CA58 ; Editor Warm Start
BUTTON_CL         = $CA64 ; CL Button (Clear LCD )
BTN_RCL           = $CB61 ; RCL Button
RSV_CHNG          = $CB69 ; Change RESERVE level
BTN_SHMODE        = $CB9C ; SHIFT MODE Button (RESERVE mode)
BTN_MODE          = $CBA0 ; MODE Button
BTN_INS           = $CBC7 ; INS Button
BTN_DEL           = $CBCF ; DEL Button
BTN_RIGHT         = $CBE4 ; CURSOR RIGHT Button
PRG_ENTER         = $CC1D ; "@", Programmatic ENTER
BTN_LRFT          = $CC22 ; CURSOR LEFT Button
BTN_UP            = $CC38 ; CURSOR UP Button
BTN_DOWN          = $CC48 ; CURSOR DOWN Button
BTN_ENTER         = $CCC1 ; ENTER Button
UNLOCK            = $CD6A ; UNLOCK
BTN_OFF           = $CD71 ; OFF Button
ERR1              = $CD89 ; Display ERROR 1, return to editor.
ERRN              = $CD8B ; Display ERROR N, from UH or do 'ON-ERROR' routine.
INS2INBUF         = $CDE6 ; INSERT - Insert one character into the Input Buffer.
CHAR2INBUF        = $CE10 ; Enter characters into the Input Buffer.
DELFRMINBUF       = $CE38 ; DELETE - Delete one character from the Input Buffer.
DEFEVAL           = $CE4A ; Evaluate DEF key
RESKEY_SRCH       = $CEC4 ; Searches for reserve key code in Reserve memory
TXFR_RSV_KEY      = $CED0 ; Transfers reserve key assignment to Reserve memory.
PRGLINE_TDI       = $CF27 ; Transfer, delete, insert program line from Input Buffer
INBUF_CLRRST      = $D021 ; Clear rest of the input buffer (0D).
INBUF_INIT        = $D030 ; Clear Input Buffer, Y-Reg points to start of Input Buffer
INBUF_CLR         = $D034 ; Clears Input buffer with $0D
SYSMSG            = $D046 ; Send System Messages.
XREG2YREG         = $D049 ; Transfers UL bytes from X-Reg to Y-Reg
VARONBSTK         = $D04C ; Find variable on Basic Stack, if not found C = 0.
POPBSTK           = $D065 ; Pop address from Basic Stack.
PSHBSTK           = $D071 ; Push U-Reg to Basic Stack
DELSVARS          = $D080 ; Deletes all standard variables
DELDVARS          = $D091 ; Deletes dimensioned variables
DEL_DIM_VARS      = $D09C ; Deletes dimensioned variables if program and variable memory overlap C=1
BCD_Y2ARX         = $D14F ; Pass BCD number pointed to by Y-Reg to AR-X
LINESEARCH        = $D2EA ; Searches for line number according to U-Reg from start of program.
SRCHPRGLINE       = $D2EC ; Searches program line in U-REG from X-REG
DELU_FROMX        = $D3C4 ; Deletes (U + 1) bytes from X-Reg.
DEC2HEX           = $D3D5 ; Convert from decimal to hexadecimal.
BCMD_PEEK         = $D993 ; Basic commands PEEK/PEEK#
BCMD_NOT          = $D99E ; Basic command NOT
BCMD_INKY         = $D9AA ; Basic command INKEY$
BCMD_CHR          = $D9B1 ; Basic command CHR$
BCMD_STR          = $D9CF ; Basic command STR$
BCMD_LEN          = $D9D7 ; Basic command LEN / ASC
ARUINT2ARX        = $D9E7 ; Transfers U-Reg as an integer to AR-X in the format '82 UH UL '.
BCMD_RLM_STR      = $D9F3 ; Basic commands RIGHT$ / LEFT$ / MID$
BCMD_STATUS       = $DA44 ; Basic command STATUS
BCMD_MEM          = $DA5D ; Basic command MEM
MULT16B           = $DA71 ; 16-Bit Multiplication: X-Reg=Y-Reg*U-Reg.
TWOSCOMP          = $DAA8 ; Forms two's complement of U-Reg.
EVAL_USING        = $DAB2 ; Evaluation of USING paramters from Y-Reg
ISARXBCD          = $DB87 ; Check AR-X for BCD format
LOAD_NEXT         = $DCD4 ; Load next Token / character
BCMD_TIME         = $DE82 ; Basic command TIME
XREG2STRBUF       = $DFA1 ; Inserts string pointed to by X-Reg into string buffer. Jump if overflow.
ARX2STRBUF        = $DFC4 ; Loads AR-X with a pointer to the string buffer.
U_MINUS_X         = $DFE2 ; U-Reg = U-Reg - X-Reg. If overflow occurs C=0 and UH=16
MEM_IN_UREG       = $DFEE ; Calculates the available memory space (MEM) in U-Reg.
PRGST2XREG        = $DFF3 ; X-Reg = Program Start Address. U-Reg = STATUS 1-2
RESET             = $E000 ; Reset-Routine
IO_INT            = $E153 ; Initializes I/O module with table from E168.
IO_TBL            = $E168 ; Paramaters for I/O init. (Byte table)
ISR_HANDLER       = $E171 ; Maskable Interrupt Routine
NMI_HANDLER       = $E22B ; Non-Maskable Interrupt Routine
TIMER_ISR         = $E22C ; Timer Interrupt
PVBANK            = $E234 ; PV banking. Using status of bit 0 in 7900. If 0, PV=1.
WAITNOKEYS        = $E23D ; Waits until no more keys are pressed.
WAIT4KB           = $E243 ; Waiting for character input from keyboard. Accumulator=character
AUTO_OFF          = $E33F ; Auto-Power-Off routine
ISKEY_1           = $E418 ; Keyboard query. Z=1 if no key pressed.
ISKEY_0           = $E41A ; Keyboard query. Z=0 if no key pressed.
KEY2ASCII         = $E42C ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
CHK_BRK           = $E451 ; Checks whether Break was pressed. Yes: Z=0, no Z=1.
STR_COMP          = $E4A0 ; Compare two strings: pointer in Y-Reg and AR-Y. AR-X=1 is true.
TOK_TABL_SRCH     = $E4A8 ; Searches for token table below C000. CE-158 C=1, UH-1. CE-150 C=1, UH=2
BCMD_INPUTNUM     = $E4E7 ; Basic command INPUT#
BCMD_PRINT        = $E4EB ; Basic command PRINT
WRITE2CLOCK       = $E52B ; Write to clock  chip.
TIMEMODE          = $E573 ; Timer mode select according to Accumulator
ARX2TIME          = $E59A ; Write TIME from AR-X to clock chip
TIME2ARX          = $E5B4 ; Read TIME from clock chip into AR-X.
BEEP_ON-OFF       = $E655 ; Beep ON/OFF. Beep on/off pointer 7868 80=1 beep off, 80=0 beep on.
BCMD_BEEP_STD     = $E669 ; Basic command BEEP - Standard beep.
BCMD_BEEP         = $E66F ; Basic command BEEP - Duration in X-Reg, Pitch in UL.
BCMD_PAUSE        = $E6A5 ; Basic command PAUSE
BCMD_GPRINT       = $E7AC ; Basic command GPRINT
BCMD_GCURSOR      = $E83E ; Basic command GCURSOR
BCMD_CURSOR       = $E846 ; Basic command CURSOR
BCMD_CLS          = $E865 ; Basic command CLS
BCMD_WAIT         = $E86A ; Basic command WAIT
TIMEDELAY         = $E88C ; Time delay 15.625 ms * number in U-Reg. BREAK is possible.
PRGMDISP          = $E8CA ; Display program.
STATUSCHK         = $E9EB ; Checks display and input status.
USING_FRMT        = $EA78 ; USING formatting. If error C = 1.
ARX2ASCII         = $EB40 ; Converts AR-X to ASCII according to USING parameters.
TRUNCDEC          = $EC2F ; Truncation of the decimal places
BCMD_DEC9         = $EC3C ; Checks if value in AR-X can be represented in 9 decimal places. If not, C=1.
X_STROUT          = $EC5C ; Transfers string in X-Reg to output buffer. If error C=1.
ARX2BCD           = $EC6C ; If AR-X numerical convert to BCD. C=0. If CSI contine w/Distance Address D1.
ARXBCD2ASCII      = $EC74 ; Converts AR-X from BCD to ASCII and transfers to output buffer.
XP_STROUT         = $EC82 ; Transmits string X-Reg points to into output buffer. C=1 if buffer full
CLRNOCURSOR       = $EC9C ; Clears LCD if cursor not allowed and sets the matrix column pointer to 00.
INIT_CURS         = $ECAE ; Initializes cursor parameters.
INIT_MTRX         = $ECB2 ; Initializes matrix column pointer (0).
ARX2OUTBUF        = $ECB7 ; Transfers value in AR-X to output buffer.
ARX2OUTBUF_F      = $ECD6 ; Tranfer AR-X foramtted to Ouput Buffer
ARXASCII2OUTBUF   = $ECE3 ; Convert AR-X to ASCII and sent to Output Buffer
USING_PARAM       = $ECEB ; Determine and transer USING paramaters
OUTBUF2LCD        = $ECFA ; Output 26 characters in Output Buffer to LCD
TEXTUREG_A        = $ED00 ; Output of text on LCD. U-Reg=start address; A=length.
TEXTUREG_XL       = $ED3B ; Outputs text from U-Reg. XL = number of characters
CHAR2COL          = $ED4D ; Output character at next matrix column
CHARA2COL         = $ED57 ; Output character in A to next matrix column.
CHARA2COLX        = $ED5B ; Output character in A to matrix column X-Reg points to.
A2HEX             = $ED7D ; Convert character in A to HEX nibble
ASCII2HEX         = $ED95 ; Convert two ASCII characters from X-Reg into HEX
MTRXNRANGE        = $EDAB ; Checks if matrix pointer still in permissible range 0-155. No, C=1
MTRXINC           = $EDB1 ; Increase matrix pointer if in permissible range 0-155. No, C=1
LCDCACHE          = $EDC1 ; Cache LCD display of 7810-7BFF
BCMD_BFF          = $EDD8 ; Retrieve LCD display of 7610-7BFF
HEX2COL           = $EDEF ; Output HEX value from A to next matrix column
GPRNT_A_2LCD      = $EDF6 ; Output of A as a GRPRINT (bit pattern) on LCD 
MATRIX_PTR2XREG   = $EE1F ; Calculates matrix column address from matrix pointer, to X-Reg.
MATRIX_A2XREG     = $EE22 ; Calculated matrix column address from A, to X-Reg
CHAR2ADDR         = $EE48 ; Retrive address in Character Set Table for characters in A
LCDCLR            = $EE71 ; Clears the LCD display.
LCDCLRRNG         = $EE78 ; Clears the range from (UH00-UH40).
SAVELCD2BUF       = $EE80 ; Save LCD to buffer
BUF2LCD           = $EE99 ; Transfer buffer to LCD
LCDCHRLEFT        = $EEB0 ; Determines number of empty characters left on LCD, to A.
BCMD_POINT        = $EECB ; Basic command POINT
CURSOR_OFF        = $EF00 ; Turns off blinking cursor.
USING2STK         = $EF05 ; Saves USING parameters on processor stack (7895-7897)
ARX2STRNG         = $EF1B ; Convert AR-X to string
STK2USING         = $EF35 ; Get USING parameters from processor stack.
TXT2LCD           = $EF44 ; Output text on LCD display.
TXT2LCD_ARY       = $EF5B ; Output text on LCD from AR-Y to 7AXL
PREPLCDOUT        = $EF67 ; Prepare the LCD output
OUTBUFCLR         = $EF81 ; Clear output buffer.
SUBTR             = $EFB6 ; AR-X = AR-X - AR-Y (Subtraction).
ADDIT             = $EFBA ; AR-X = AR-X + AR-Y (Addition).
PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)
SQUARE            = $F019 ; AR-X = AR-X * AR-X (Square)
MULTIPLY          = $F01A ; AR-X = AR-X * AR-Y (Multiplication)
ADDMANY           = $F067 ; Add multiple ARs to AR-X if proper bit set in A
RECIPRICAL        = $F080 ; AR-X = 1 /AR- X (Reciprocal)
DIVISION          = $F084 ; AR-X = AR-X / AR-Y (Division)
SQR_ROOT          = $F0E9 ; AR-X = SQR (AR-X) (Square Root)
BCMD_LN           = $F161 ; Basic command LN, AR-X = LN (AR-X)
BCMD_LOG          = $F165 ; Basic command LOG, AR-X = LOG (AR-X)
BCMD_EXP          = $F1CB ; Basic command EXP
EXPONENT          = $F1D4 ; AR-X = 10 ^ AR-X
BCMD_COS          = $F391 ; Basic command COS
BCMD_TAN          = $F39E ; Basic command TAN
BCMD_SIN          = $F3A2 ; Basic command SIN
BCMD_ACS          = $F492 ; Basic command ACS
BCMD_ATN          = $F496 ; Basic command ATN
BCMD_ASN          = $F49A ; Basic command ASN
BCMD_DEG          = $F531 ; Basic command DEG
BCMD_DMS          = $F564 ; Basic command DMS
BCMD_ABS          = $F597 ; Basic command ABS
BCMD_SGN          = $F590 ; Basic command SGN
BCMD_PI           = $F5B5 ; Basic command PI (in AR-Y)
BCMD_INT          = $F5BE ; Basic command INT
BCMD_RND          = $F5D0 ; Basic command RND
RANDGEN           = $F5EB ; Generates randon number in AR-X
ARX_              = $F63C ; Sets digits 11 and 12 in AR-X to 00. Used at end of (5C)
BCMD_RANDOM       = $F641 ; Basic command RANDOM
ARX2BCD_ABS       = $F65D ; Converts AR-X into BCD form.
ARX2BCD           = $F663 ; Converts the result in the AR-X into the correct BCD format.
XFER_DEC_ARX2ARY  = $F6B4 ; Transfers decimal places from AR-X to AR-Y.
SIGN_TEST         = $F6E6 ; Push result of sign combination (AR-X and AR-Y) on the stack.
LDA_SGN_ARX       = $F6FB ; Load A with sign from AR-X, clears signs AR-X.
XFER_ARY2ARS      = $F701 ; Transfer AR-Y to AR-S
XFER_ARX2ARS      = $F707 ; Transfer AR-X to AR-S.
XFER_ARX2ARY      = $F70D ; Transfer AR-X to AR-Y.
XFER_ARS2ARY      = $F715 ; Transfer AR-S to AR-Y.
XFER_SM_ARY2ARX   = $F71B ; Transfer sign and mantissa from AR-Y to AR-X.
XFER_SM_ARZ2ARX   = $F71F ; Transfer sign and mantissa from AR-Z to AR-X.
XFER_SM_ARY2ARZ   = $F725 ; Transfer sign and mantissa from AR-Y to AR-Z.
XFER_SM_ARX2ARY   = $F729 ; Transfer sign and mantissa from AR-X to AR-Y
XFER_SM_ARX2ARZ   = $F72F ; Transfer sign and mantissa from AR-X to AR-Z (7A09 - 7A0F).
XREG2YREG         = $F733 ; Block shift 7 bytes from X-Reg to Y-Reg.
XFER_ARY2ARX      = $F737 ; Transfer AR-S to AR-X.
XFER_ARY2ARX      = $F73D ; Transfer AR-Y to AR-X.
CLR_SM_ARY        = $F747 ; Clear sign and mantissa of AR-Y.
CLR_SM_ARZ        = $F74B ; Clear sign and mantissa of AR-Z.
CLR_SM_ARW        = $F74F ; Clear sign and mantissa of AR-W.
CLR_ARZ           = $F753 ; Clear AR-Y
CLR_ARZ           = $F757 ; Clear AR-X.
CLR_ARZ           = $F75B ; Clear AR-Z.
CLR_SM_XREG       = $F75F ; Clear sign and mantissa in AR-X
CLR_7_XREG        = $F761 ; Clear 7 bytes from X-Reg.
CLR_N_XREG        = $F763 ; Clear UL + 1 byte from X-Reg.
ARW_SHR_4BITS     = $F769 ; Shift AR-W one nibble right (/10)
ARZ_SHR_4BITS     = $F76D ; Shift AR-Z one nibb;e right (/10)
ARY_SHR_4BITS     = $F771 ; Shift AR-Y one nibble right (/10)
ARX_SHR_4BITS     = $F775 ; Shift AR-X one nibble right (/10)
X_REG_SHR_4BITS   = $F777 ; Shift X-Reg one nibble right (/10)
ARS_SHL_4BITS     = $F78C ; Shift AR-S one nibble left (*10).
ARW_SHL_4BITS     = $F794 ; Shift AR-W one nibble left (*10).
ARZ_SHL_4BITS     = $F798 ; Shift AR-Z one nibble left (*10).
ARX_SHL_4BITS     = $F79C ; Shift AR-X one nibble left (*10).
RND2ARX           = $F7A7 ; Transfer random number from RND to AR-X.
SET_HB_XYREGS     = $F7B0 ; Set high bytes in X-Reg and Y-Reg to 7A (to AR register).
SWAP_AARX_ARY     = $F7B5 ; Swap AR-X with AR-S.
SWAP_ARX_ARY      = $F7B9 ; Swap AR-X with AR-Y.
SWAP_BYTES        = $F7BF ; Swap bytes (UL+1)
ADD_ARU_ARX       = $F7C8 ; AR-X = AR-X + AR-U.
TOKENIZE_INBUF    = $F957 ; Tokenizer. Convert input buffer to program line.
VAR_TYPE          = $F97B ; Convert input buffer into tokens and use formula interpreter
DEC_OPN           = $FA58 ; Decrement the OPN byte in A in 2K steps
SET_PV            = $FA65 ; Sets PV bit and PV byte according to Carry flag
TOKEN_CHECK       = $FA74 ; Checks if token table exists, right-shifted HB address in A. No, C=0.
TOKEN_PROCESS     = $FA89 ; Processes tokens according to data bytes.
PVBANK            = $FB2A ; Performs PV banking according to A (79D0).
TRACE             = $FB9D ; Trace
STRXFR            = $FBCB ; Save string to output buffer or output to string buffer
AUX_CONST         = $FBE9 ; Auxiliary constants for arithmetic routines
CHARSET           = $FCA0 ; Character set table
KB_LAYOUT_NORM    = $FE80 ; Keyborad layout (standard function)
KB_LAYOUT_SH      = $FEC0 ; Keyborad layout (shifted function)
CALL_VECTORS      = $FF00 ; Table for CALL vectors

;SEGMENT types
.BASTBL $C000
;.BYTE $C000 
;.CODE $C001
;.BYTE $C01D
;.BYTE $C01F
;.BYTE $C020 ; Token pointers
;.BYTE $C054 ; Token table
.BYTE $C34F
.BYTE $C35C
.BYTE $C362
.BYTE $C365
.BYTE $C36B
.BYTE $C38B
.BYTE $C3A8
.CODE $C400
.BYTE $FBE9
.BYTE $FCA0
.BYTE $FE80
.BYTE $FEC0
.BYTE $FF00

