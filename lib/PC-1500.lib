 ; PC-1500 library file
RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
SHADOW_RAM_SIZE   = $0600 ; 
DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
DISP_BUFF_SIZE    = $0150 ; 
STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
STRING_VARS_SIZE  = $01AF ; 
CPU_STACK         = $7800 ; CPU stack (7800-784F)
CPU_STACK_SIZE    = $50   ; 
KATAFLAGS         = $785D ; Katakana displayed flags
KATACHAR          = $785E ; Address of Katakana character codes (H)
ST_ROM_MOD        = $7860 ; 
ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
RAM_ST_H          = $7863 ; Start of RAM pointer (H)
RAM_END_H         = $7864 ; End of RAM pointer (H)
BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
BEEP_PTR          = $786B ; BEEP and RMT flags
RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
RCLTEMPBUFF_SIZE  = $05   ; 
WAIT_CFG          = $7871 ; WAIT setting
WAIT_CTR_H        = $7872 ; WAIT time counter (H)
WAIT_CTR_L        = $7873 ; WAIT time counter (L)
CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
BEEP_FREQ         = $7878 ; BEEP frequency
CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
BLNKD_CHAR_CODE   = $787D ; Code of character blinked
CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
DISPARAM          = $7880 ; Display Parameter: determines display at READY
STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
CURVARADD_H       = $7883 ; Current variable address (H)
CURVARADD_L       = $7884 ; Current variable address (L)
CURVARTYPE        = $7885 ; Current variable type
LASTVARADD_H      = $7886 ; Last variable address (H)
LASTVARADD_L      = $7887 ; Last variable address (L)
LASTVARTYPE       = $7888 ; Last variable type
BREAKPARAM        = $788A ; BREAK flag parameter
INBUFPTR_L        = $788B ; Input Buffer pointer (L)
NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
TRACE             = $788E ; TRACE Parameter
FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
USINGM            = $7896 ; USING M integer part
USING_CHR         = $7897 ; USING & character string
USINGMD           = $7898 ; USING m decimal part
VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
ERL               = $789B ; ERL, Error code
CURR_LINE_H       = $789C ; Current line number (H)
CURR_LINE_L       = $789D ; Current line number (L)
CURR_TOP_H        = $789E ; Beginning address of current program (H)
CURR_TOP_L        = $789F ; Beginning address of current program (L)
PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
PREV_LINE_H       = $78A2 ; Previous line number (H)
PREV_LINE_L       = $78A3 ; Previous line number (L)
PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
SRCH_LINE_H       = $78A8 ; Line number found after search (H)
SRCH_LINE_L       = $78A9 ; Line number found after search (L)
SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
BRK_ADD_H         = $78AC ; Break address (H)
BRK_ADD_L         = $78AD ; Break address (L)
BRK_LINE_H        = $78AE ; Break line number (H)
BRK_LINE_L        = $78AF ; Break line number (L)
BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
ERR_ADD_H         = $78B2 ; Error address (H)
ERR_ADD_L         = $78B3 ; Error address (L)
ERR_LINE_H        = $78B4 ; Error line number (H)
ERR_LINE_L        = $78B5 ; Error line number (L)
ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
DATA_PTR_H        = $78BE ; Pointer for data statement (H)
DATA_PTR_L        = $78BF ; Pointer for data statement (H)
FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
FIXED_VARS_SIZE   = $0110 ; 
PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
ARX               = $7A00 ; Floating-Point accumulator
ARX_SIZE          = $08   ; 
ARZ               = $7A08 ; Scratch register (7A00-7A07)
ARZ_SIZE          = $08   ; 
ARY               = $7A10 ; Second operand (7A10-7A17)
ARY_SIZE          = $08   ; 
ARU               = $7A18 ; Scratch register (7A18-7A1F)
ARU_SIZE          = $08   ; 
ARV               = $7A20 ; Scratch register (7A2-7A27)
ARV_SIZE          = $08   ; 
ARW               = $7A28 ; Scratch register (7A28-7A2F)
ARW_SIZE          = $08   ; 
ARS               = $7A30 ; Temporary storage register (7A30-7A37)
ARS_SIZE          = $08   ; 
B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
B_STACK_SIZE      = $C8   ; 
RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
RND_VAL_SIZE      =       ; S
KEY_REPEAT        = $7B09 ; Key repeat speed
APOW_CTR_H        = $7B0A ; Auto power down counter (H)
APOW_CTR_M        = $7B0B ; Auto power down counter (M)
APOW_CTR_L        = $7B0C ; Auto power down counter (L)
CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
CURS_CTRL         = $7B0E ; Cursor Control Parameter
KEY_LAST          = $7B0F ; Last pressed key code
STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
STR_BUF_SIZE      = $50   ; 
OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
OUT_BUF_SIZE      = $50   ; 
IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
IN_BUF_SIZE       = $80   ; 

PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)